{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/hp/Desktop/practice/food-ordering/food-ordering/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\nexport var internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\nexport var NavigatorLockAcquireTimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(NavigatorLockAcquireTimeoutError, _Error);\n  var _super = _createSuper(NavigatorLockAcquireTimeoutError);\n  function NavigatorLockAcquireTimeoutError(message) {\n    var _this;\n    _classCallCheck(this, NavigatorLockAcquireTimeoutError);\n    _this = _super.call(this, message);\n    _this.isAcquireTimeout = true;\n    return _this;\n  }\n  return _createClass(NavigatorLockAcquireTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport function navigatorLock(_x, _x2, _x3) {\n  return _navigatorLock.apply(this, arguments);\n}\nfunction _navigatorLock() {\n  _navigatorLock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, acquireTimeout, fn) {\n    var abortController;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n          }\n          abortController = new globalThis.AbortController();\n          if (acquireTimeout > 0) {\n            setTimeout(function () {\n              abortController.abort();\n              if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n              }\n            }, acquireTimeout);\n          }\n          _context2.next = 5;\n          return globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {\n            mode: 'exclusive',\n            ifAvailable: true\n          } : {\n            mode: 'exclusive',\n            signal: abortController.signal\n          }, /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(lock) {\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!lock) {\n                      _context.next = 11;\n                      break;\n                    }\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock: acquired', name);\n                    }\n                    _context.prev = 2;\n                    _context.next = 5;\n                    return fn();\n                  case 5:\n                    return _context.abrupt(\"return\", _context.sent);\n                  case 6:\n                    _context.prev = 6;\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock: released', name);\n                    }\n                    return _context.finish(6);\n                  case 9:\n                    _context.next = 13;\n                    break;\n                  case 11:\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n                    }\n                    throw new NavigatorLockAcquireTimeoutError(\"Acquiring an exclusive Navigator LockManager lock \\\"\".concat(name, \"\\\" immediately failed\"));\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee, null, [[2,, 6, 9]]);\n            }));\n            return function (_x4) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _navigatorLock.apply(this, arguments);\n}","map":{"version":3,"names":["supportsLocalStorage","internals","debug","globalThis","localStorage","getItem","NavigatorLockAcquireTimeoutError","_Error","_inherits","_super","_createSuper","message","_this","_classCallCheck","call","isAcquireTimeout","_createClass","_wrapNativeSuper","Error","navigatorLock","_x","_x2","_x3","_navigatorLock","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","name","acquireTimeout","fn","abortController","wrap","_callee2$","_context2","prev","next","console","log","AbortController","setTimeout","abort","navigator","locks","request","mode","ifAvailable","signal","_ref","_callee","lock","_callee$","_context","abrupt","sent","finish","concat","stop","_x4"],"sources":["C:\\Users\\hp\\Desktop\\practice\\food-ordering\\food-ordering\\node_modules\\@supabase\\gotrue-js\\src\\lib\\locks.ts"],"sourcesContent":["import { supportsLocalStorage } from './helpers'\n\n/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(\n    globalThis &&\n    supportsLocalStorage() &&\n    globalThis.localStorage &&\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\n  ),\n}\n\nexport class NavigatorLockAcquireTimeoutError extends Error {\n  public readonly isAcquireTimeout = true\n\n  constructor(message: string) {\n    super(message)\n  }\n}\n\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock<R>(\n  name: string,\n  acquireTimeout: number,\n  fn: () => Promise<R>\n): Promise<R> {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\n  }\n\n  const abortController = new globalThis.AbortController()\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      abortController.abort()\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\n      }\n    }, acquireTimeout)\n  }\n\n  return await globalThis.navigator.locks.request(\n    name,\n    acquireTimeout === 0\n      ? {\n          mode: 'exclusive',\n          ifAvailable: true,\n        }\n      : {\n          mode: 'exclusive',\n          signal: abortController.signal,\n        },\n    async (lock) => {\n      if (lock) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: acquired', name)\n        }\n\n        try {\n          return await fn()\n        } finally {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: released', name)\n          }\n        }\n      } else {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name)\n        }\n\n        throw new NavigatorLockAcquireTimeoutError(\n          `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n        )\n      }\n    }\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}